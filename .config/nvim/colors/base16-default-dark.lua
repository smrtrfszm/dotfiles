local colors = {
  black   = '#181818',
  gray1   = '#282828',
  gray2   = '#383838',
  gray3   = '#585858',
  gray4   = '#b8b8b8',
  gray5   = '#d8d8d8',
  gray6   = '#e8e8e8',
  white   = '#f8f8f8',
  red     = '#ab4642',
  orange  = '#dc9656',
  yellow  = '#f7ca88',
  green   = '#a1b56c',
  cyan    = '#86c1b9',
  blue    = '#7cafc2',
  magenta = '#ba8baf',
  brown   = '#a16946',
}

local highlights = {
  Normal       = { fg = colors.white, bg = colors.black },
  Bold         = { bold = true },
  Debug        = { fg = colors.red },
  Directory    = { fg = colors.blue },
  Error        = { fg = colors.black, bg = colors.red},
  ErrorMsg     = { fg = colors.red, bg = colors.black },
  Exception    = { fg = colors.red },
  FoldColumn   = { fg = colors.cyan,  bg = colors.gray1 },
  Folded       = { fg = colors.gray3, bg = colors.gray1 },
  IncSearch    = { fg = colors.gray1, bg = colors.orange },
  Italic       = { italic = true },
  Macro        = { fg = colors.red },
  MatchParen   = { bg = colors.gray3 },
  ModeMsg      = { fg = colors.green },
  MoreMsg      = { fg = colors.green },
  Question     = { fg = colors.blue },
  Search       = { fg = colors.gray1, bg = colors.yellow },
  Substitute   = { fg = colors.gray1, bg = colors.yellow },
  SpecialKey   = { fg = colors.gray3 },
  TooLong      = { fg = colors.red },
  Underlined   = { fg = colors.red },
  Visual       = { bg = colors.gray2 },
  VisualNOS    = { fg = colors.red },
  WarningMsg   = { fg = colors.red },
  WildMenu     = { fg = colors.red,   bg = colors.yellow },
  Title        = { fg = colors.blue },
  Conceal      = { fg = colors.blue,  bg = colors.black },
  Cursor       = { fg = colors.black, bg = colors.gray5 },
  NonText      = { fg = colors.gray3 },
  LineNr       = { fg = colors.gray3, bg = colors.gray1 },
  SignColumn   = { fg = colors.gray3, bg = colors.gray1 },
  StatusLine   = { fg = colors.gray4, bg = colors.gray2 },
  StatusLineNC = { fg = colors.gray3, bg = colors.gray1 },
  VertSplit    = { fg = colors.gray2, bg = colors.gray2 },
  ColorColumn  = { bg = colors.gray1 },
  CursorColumn = { bg = colors.gray1 },
  CursorLine   = { bg = colors.gray1 },
  CursorLineNr = { fg = colors.white, bg = colors.gray1 },
  QuickFixLine = { bg = colors.gray1 },
  PMenu        = { fg = colors.gray5, bg = colors.gray1 },
  PMenuSel     = { fg = colors.gray1, bg = colors.gray5 },
  TabLine      = { fg = colors.gray3, bg = colors.gray1 },
  TabLineFill  = { fg = colors.gray3, bg = colors.gray1 },
  TabLineSel   = { fg = colors.green, bg = colors.gray1 },

  Boolean = { fg = colors.orange },
  Character = { fg = colors.red },
  Comment = { fg = colors.gray3 },
  Conditional = { fg = colors.magenta },
  Constant = { fg = colors.orange },
  Define = { fg = colors.magenta },
  Delimiter = { fg = colors.brown },
  Float = { fg = colors.orange },
  Function = { fg = colors.blue },
  Identifier = { fg = colors.red },
  Include = { fg = colors.blue },
  Keyword = { fg = colors.magenta, italic = true },
  Label = { fg = colors.yellow },
  Number = { fg = colors.orange },
  Operator = { fg = colors.gray5 },
  PreProc = { fg = colors.yellow },
  Repeat = { fg = colors.yellow },
  Special = { fg = colors.cyan },
  SpecialChar = { fg = colors.brown },
  Statement = { fg = colors.red },
  StorageClass = { fg = colors.yellow },
  String = { fg = colors.green },
  Structure = { fg = colors.magenta },
  Tag = { fg = colors.yellow },
  Todo = { fg = colors.yellow, bg = colors.gray1 },
  Type = { fg = colors.yellow },
  Typedef = { fg = colors.yellow },

  DiffAdd = { fg = colors.green, bg = colors.gray1 },
  DiffChange = { fg = colors.gray3, bg = colors.gray1 },
  DiffDelete = { fg = colors.red, bg = colors.gray1 },
  DiffText = { fg = colors.blue, bg = colors.gray1 },
  DiffAdded = { fg = colors.green, bg = colors.black },
  DiffFile = { fg = colors.red, bg = colors.black },
  DiffNewFile = { fg = colors.green, bg = colors.black },
  DiffLine = { fg = colors.blue, bg = colors.black },
  DiffRemoved = { fg = colors.red, bg = colors.black },

  rainbowcol1 = { fg = colors.brown },
  rainbowcol2 = { fg = colors.green },
  rainbowcol3 = { fg = colors.cyan },
  rainbowcol4 = { fg = colors.magenta },
  rainbowcol5 = { fg = colors.blue },
  rainbowcol6 = { fg = colors.orange },
  rainbowcol7 = { fg = colors.yellow },

  TelescopeNormal = { link = 'Normal' },
  TelescopeBorder = { fg = colors.gray4 },

  GitSignsAdd       = { fg = colors.green, bg = colors.gray1 },
  GitSignsChange    = { fg = colors.blue, bg = colors.gray1 },
  GitSignsDelete    = { fg = colors.red, bg = colors.gray1 },
  GitSignsUntracked = { fg = colors.green, bg = colors.gray1 },

  DiagnosticError = { fg = colors.red },
  DiagnosticWarn  = { fg = colors.yellow },
  DiagnosticInfo  = { fg = colors.blue },
  DiagnosticHint  = { fg = colors.gray4 },

  DiagnosticUnderlineError = { undercurl = true, sp = colors.red },
  DiagnosticUnderlineWarn  = { undercurl = true, sp = colors.yellow },
  DiagnosticUnderlineInfo  = { undercurl = true, sp = colors.blue },
  DiagnosticUnderlineHint  = { undercurl = true, sp = colors.gray4 },

  DiagnosticSignError = { fg = colors.red, bg = colors.gray1 },
  DiagnosticSignWarn  = { fg = colors.yellow, bg = colors.gray1 },
  DiagnosticSignInfo  = { fg = colors.blue, bg = colors.gray1 },
  DiagnosticSignHint  = { fg = colors.gray4, bg = colors.gray1 },

  IndentBlanklineChar = { fg = colors.gray1, nocombine = true };
  IndentBlanklineContextChar = { fg = colors.gray3, nocombine = true };

  ['@keyword']               = { link = 'Keyword' },
  ['@preproc']               = { link = '@keyword' },
  ['@storageclass']          = { link = '@keyword' },
  ['@type.qualifier']        = { link = '@keyword' },
  ['@namespace']             = { fg = colors.blue },
  ['@include']               = { fg = colors.cyan },
  ['@tag']                   = { fg = colors.red },
  ['@tag.delimiter']         = { fg = colors.gray3 },
  ['@tag.attribute']         = { fg = colors.yellow },
  ['@storageclass.lifetime'] = { fg = colors.cyan },

}

vim.cmd('hi clear')
for group, hl in pairs(highlights) do
  vim.api.nvim_set_hl(0, group, hl)
end
